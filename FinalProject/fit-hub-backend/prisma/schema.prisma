// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId           Int               @id @default(autoincrement())
  firstName        String
  lastName         String
  username         String
  password         String
  email            String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  profile          UserProfile?
  passwordResets   PasswordReset[]
  fitnessExercises FitnessExercise[]
  posts            Post[]
  comments         Comment[]
  progresses       Progress[]
  likedPosts       PostLike[]
  likedComments    CommentLike[]
  AddedExercise    AddedExercise[]
}

model Post {
  postId    Int        @id @default(autoincrement())
  userId    Int
  likes     Int        @default(0)
  dislikes  Int
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [userId])
  comments  Comment[]
  likedBy   PostLike[]
}

model PostLike {
  postLikeId Int      @id @default(autoincrement())
  userId     Int
  postId     Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [userId])
  post       Post     @relation(fields: [postId], references: [postId])

  @@unique([userId, postId])
}

model UserProfile {
  userProfileId  Int      @id @default(autoincrement())
  userId         Int      @unique
  firstName      String
  lastName       String
  bio            String
  profilePicture String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [userId])
}

model PasswordReset {
  resetId     Int      @id @default(autoincrement())
  userId      Int      @unique
  username    String
  oldPassword String
  newPassword String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [userId])
}

model FitnessExercise {
  id          Int        @id @default(autoincrement())
  Level       Level      @default(BEGINNER)
  Type        Types      @default(CARDIO)
  Name        String
  Description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [userId])
  userId      Int
  progresses  Progress[]
}

model AddedExercise {
  addedExerciseId Int      @id @default(autoincrement())
  id              Int
  userId          Int
  title           String
  Name            String
  reps            Int
  setDate         DateTime
  isComplete      Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [userId])
}

model IsCompleted {
  iscompletedId   Int     @id @default(autoincrement())
  addedExerciseId Int
  Name            String
  reps            Int
  isComplete      Boolean @default(false)
}

model Progress {
  progressId      Int             @id @default(autoincrement())
  userId          Int
  exerciseId      Int
  date            DateTime
  name            String
  currentStatus   String
  goal            String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [userId])
  fitnessExercise FitnessExercise @relation(fields: [exerciseId], references: [id])
}

enum Level {
  BEGINNER
  INTERMEDIATE
  EXPERT
}

enum Types {
  ABDOMINAL
  BACK
  BICEPS
  CARDIO
  REST
}

model Comment {
  commentId Int           @id @default(autoincrement())
  postId    Int
  userId    Int
  likes     Int           @default(0)
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  post      Post          @relation(fields: [postId], references: [postId])
  user      User          @relation(fields: [userId], references: [userId])
  likedBy   CommentLike[]
}

model CommentLike {
  commentLikeId Int      @id @default(autoincrement())
  userId        Int
  commentId     Int
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [userId])
  comment       Comment  @relation(fields: [commentId], references: [commentId])

  @@unique([userId, commentId])
}
